name: Build and Test

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2

      - name: Setup JDK 21
        uses: actions/setup-java@v4.7.0
        with:
          java-version: 21
          distribution: temurin
          cache: gradle

      - name: Cache Gradle files
        uses: actions/cache@v4.2.0
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper/
          key: ${{ runner.os }}-gradle

      - name: Make Gradle wrapper executable
        run: chmod +x ./gradlew

      - name: Build
        run: ./gradlew chiseledBuild

      - name: Capture build artifacts
        uses: actions/upload-artifact@v4.6.0
        with:
          name: Artifacts
          path: |
            build/libs/
            CHANGELOG.md

  generate-matrix:
    runs-on: ubuntu-latest
    needs: build
    outputs:
      versions: ${{ steps.extract-versions.outputs.versions }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Download build artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: Artifacts
          path: ./

      - name: Install semver
        run: npm install semver -g

      - name: Extract Minecraft versions from JAR names
        id: extract-versions
        run: |
          JAR_FILES=$(find build/libs -name "*.jar")
          VERSION_ARRAY="["

          VERSIONS_JSON=$(cat .github/versions.json)
          AVAILABLE_VERSIONS=$(echo "$VERSIONS_JSON" | jq -r 'keys[]')

          for JAR_FILE in $JAR_FILES; do
            JAR_NAME=$(basename "$JAR_FILE")
            MC_VERSIONS=$(echo "$JAR_NAME" | grep -oP '(?<=\+)\d+\.\d+(\.\d+)?(-\d+\.\d+(\.\d+)?)*')
          
            if [[ $MC_VERSIONS == *"-"* ]]; then
              echo "++MC_VERSIONS is a range"
              LOWEST_VERSION=$(echo "$MC_VERSIONS" | cut -d'-' -f1)
              HIGHEST_VERSION=$(echo "$MC_VERSIONS" | cut -d'-' -f2)
          
              for VERSION in $AVAILABLE_VERSIONS; do
                CMP_VERSION=$VERSION
              
                # If version missing patch version (e.g. 1.20 instead of 1.20.0), add it
                if [[ $VERSION == *"."* ]]; then
                  if [[ $VERSION == *"."* ]]; then
                    PATCH_VERSION=$(echo "$VERSION" | cut -d'.' -f3)
                    if [[ $PATCH_VERSION == "" ]]; then
                      echo "Adding patch version to $VERSION"
                      CMP_VERSION="$VERSION.0"
                    fi
                  fi
                fi
              
                echo "Comparing $LOWEST_VERSION - $HIGHEST_VERSION with $CMP_VERSION"
                if semver -r "$LOWEST_VERSION - $HIGHEST_VERSION" "$CMP_VERSION"; then
                  VERSION_ARRAY+="\"$VERSION\","
              
                  # Remove the version from the list of available versions
                  #echo "Removing $VERSION from available versions"
                  #echo "Available versions: $AVAILABLE_VERSIONS"
                  #AVAILABLE_VERSIONS=$(echo "$AVAILABLE_VERSIONS" | grep -v "^$VERSION$")
                  #echo "Available versions after removal: $AVAILABLE_VERSIONS"
                fi
              done
            else
              if echo "$AVAILABLE_VERSIONS" | grep -q "$MC_VERSIONS"; then
                echo "--MC_VERSIONS is a single version"
                VERSION_ARRAY+="\"$MC_VERSIONS\","
              
                # Remove the version from the list of available versions
                #echo "Removing $VERSION from available versions"
                #echo "Available versions: $AVAILABLE_VERSIONS"
                #AVAILABLE_VERSIONS=$(echo "$AVAILABLE_VERSIONS" | grep -v "^$MC_VERSIONS$")
                #echo "Available versions after removal: $AVAILABLE_VERSIONS"
              fi
            fi
          done

          VERSION_ARRAY="${VERSION_ARRAY%,}""]"
          echo "versions=$VERSION_ARRAY" >> $GITHUB_OUTPUT

  test:
    runs-on: ubuntu-latest
    needs: generate-matrix
    strategy:
      matrix:
        version: ${{ fromJson(needs.generate-matrix.outputs.versions) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.2.2

      - name: Parse versions.json for current version
        id: version-info
        run: |
          JAVA_VERSION=$(cat .github/versions.json | jq -r ".[\"${{ matrix.version }}\"].java_version")
          FABRIC_API=$(cat .github/versions.json | jq -r ".[\"${{ matrix.version }}\"].fabric_api")
          echo "java_version=$JAVA_VERSION" >> $GITHUB_OUTPUT
          echo "fabric_api=$FABRIC_API" >> $GITHUB_OUTPUT

      - name: Download build artifacts
        uses: actions/download-artifact@v4.1.8
        with:
          name: Artifacts
          path: ./

      - name: Install Java
        uses: actions/setup-java@v4.7.0
        with:
          java-version: ${{ steps.version-info.outputs.java_version }}
          distribution: temurin

      - name: Create mods directory
        run: mkdir -p run/mods

      - name: Install semver
        run: npm install semver -g

      - name: Find and copy the correct JAR
        run: |
          JAR_FILES=$(find build/libs -name "*.jar")
          for JAR_FILE in $JAR_FILES; do
            JAR_NAME=$(basename "$JAR_FILE")
            MC_VERSIONS=$(echo "$JAR_NAME" | grep -oP '(?<=\+)\d+\.\d+(\.\d+)?(-\d+\.\d+(\.\d+)?)*')

            if [[ $MC_VERSIONS == *"-"* ]]; then
              LOWEST_VERSION=$(echo "$MC_VERSIONS" | cut -d'-' -f1)
              HIGHEST_VERSION=$(echo "$MC_VERSIONS" | cut -d'-' -f2)
              if semver -r "$LOWEST_VERSION - $HIGHEST_VERSION" "${{ matrix.version }}"; then
                cp "$JAR_FILE" run/mods/
                echo "Copied JAR: $JAR_NAME for version ${{ matrix.version }}"
                break
              fi
            else
              if [[ "$MC_VERSIONS" == "${{ matrix.version }}" ]]; then
                cp "$JAR_FILE" run/mods/
                echo "Copied JAR: $JAR_NAME for version ${{ matrix.version }}"
                break
              fi
            fi
          done

      - name: Run MC test client
        uses: headlesshq/mc-runtime-test@3.0.0
        with:
          mc: ${{ matrix.version }}
          modloader: fabric
          mc-runtime-test: fabric
          fabric-api: ${{ steps.version-info.outputs.fabric_api }}
          regex: .*fabric.*
          java: ${{ steps.version-info.outputs.java_version }}
          xvfb: false
          headlessmc-command: -lwgl --retries 3 --jvm -Djava.awt.headless=true
